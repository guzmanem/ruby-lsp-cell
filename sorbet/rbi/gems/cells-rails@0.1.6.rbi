# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cells-rails` gem.
# Please instead update this file by running `bin/tapioca gem cells-rails`.


# source://cells-rails//lib/cell/rails.rb#3
module Cell
  class << self
    # source://cells-rails//lib/cell/rails.rb#4
    def rails_version; end
  end
end

# source://cells-rails//lib/cell/caching/notification.rb#2
module Cell::Caching
  mixes_in_class_methods ::Cell::Caching::ClassMethods
  mixes_in_class_methods ::Uber::InheritableAttr

  # source://cells/4.1.8/lib/cell/caching.rb#58
  def cache?(state, *args); end

  # source://cells/4.1.8/lib/cell/caching.rb#54
  def cache_store; end

  # source://cells/4.1.8/lib/cell/caching.rb#44
  def render_state(state, *args); end

  private

  # source://cells/4.1.8/lib/cell/caching.rb#68
  def fetch_from_cache_for(key, options, &block); end

  # source://cells/4.1.8/lib/cell/caching.rb#64
  def perform_caching?; end

  # source://cells/4.1.8/lib/cell/caching.rb#72
  def state_cached?(state); end

  class << self
    # source://cells/4.1.8/lib/cell/caching.rb#5
    def included(includer); end
  end
end

# source://cells-rails//lib/cell/caching/notification.rb#3
module Cell::Caching::Notifications
  # source://cells-rails//lib/cell/caching/notification.rb#4
  def fetch_from_cache_for(key, options); end
end

# These methods are automatically added to all controllers and views.
#
# source://cells-rails//lib/cell/rails.rb#9
module Cell::RailsExtensions; end

# source://cells-rails//lib/cell/rails.rb#10
module Cell::RailsExtensions::ActionController
  # source://cells-rails//lib/cell/rails.rb#11
  def cell(name, model = T.unsafe(nil), options = T.unsafe(nil), constant = T.unsafe(nil), &block); end

  # source://cells-rails//lib/cell/rails.rb#18
  def concept(name, model = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

# source://cells-rails//lib/cell/rails.rb#23
module Cell::RailsExtensions::ActionView
  # Returns the cell instance for +name+. You may pass arbitrary options to your
  # cell.
  #
  #   = cell(:song, title: "Creeping Out Sara").(:show)
  #
  # source://cells-rails//lib/cell/rails.rb#28
  def cell(name, *args, &block); end

  # # See Cells::Rails::ActionController#render_cell.
  # def render_cell(name, state, *args, &block)
  #   ::Cell::Rails.render_cell(name, state, controller, *args, &block)
  # end
  #
  # source://cells-rails//lib/cell/rails.rb#37
  def concept(name, *args, &block); end
end

# In Rails, there are about 10 different implementations of #url_for. Rails doesn't like the idea of objects, so they
# have helpers in modules. Those module are now included sequentially into other modules and/or classes. While they
# get included, they might or might not include methods, depending on the including module/class
# (example here: https://github.com/rails/rails/blob/cad20f720c4c6e04584253cd0a23f22b3d43ab0f/actionpack/lib/action_dispatch/routing/url_for.rb#L87).
#
# The outcome is that several module override #url_for, and if you're lucky, this works. If you're not, then #url_for breaks
# due to a raise in one of its basic implementations, introduced in 3.x, fixed in 4.0 and then re-introduced in 4.2
#
# This is extremely frustrating as no one in Rails core seems to tackle this problem and introduces a url object instead
# of this module madness. I have to constantly test and fix it in Cells. With the module below, I'll stop doing this.
#
# Either Rails works with Cells and we fix this in form of a URL object that gets passed into the cell (I'm happy with
# a global object here, too! Wow!) or URL helpers will stop working in Cells and a lot of people will be unhappy.
#
# Anyway, this is the reason we need this patch module. If you have trouble with URLs in Cells, then please ask Rails to
# fix their implementation. Thank you.
#
# source://cells-rails//lib/cell/rails.rb#109
module Cell::RailsExtensions::HelpersAreShit
  # from ActionDispatch:R:UrlFor.
  #
  # source://cells-rails//lib/cell/rails.rb#110
  def url_for(options = T.unsafe(nil)); end
end

# This modules overrides Cell::Testing#controller_for and provides Rails-specific logic.
#
# source://cells-rails//lib/cell/rails/testing.rb#4
module Cell::RailsExtensions::Testing
  # source://cells-rails//lib/cell/rails/testing.rb#18
  def action_controller_test_request(controller_class); end

  # source://cells-rails//lib/cell/rails/testing.rb#9
  def controller_for(controller_class); end
end

# source://cells-rails//lib/cell/rails/testing.rb#7
Cell::RailsExtensions::Testing::RAILS_5_0 = T.let(T.unsafe(nil), Gem::Version)

# source://cells-rails//lib/cell/rails/testing.rb#6
Cell::RailsExtensions::Testing::RAILS_5_1 = T.let(T.unsafe(nil), Gem::Version)

# source://cells-rails//lib/cell/rails/testing.rb#5
Cell::RailsExtensions::Testing::RAILS_9_0 = T.let(T.unsafe(nil), Gem::Version)

# Gets included into Cell::ViewModel in a Rails environment.
#
# source://cells-rails//lib/cell/rails.rb#43
module Cell::RailsExtensions::ViewModel
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Cell::RailsExtensions::ViewModel::ClassMethods
  mixes_in_class_methods ::Uber::Delegates

  # we want to use DI to set a cache store in cell/rails.
  #
  # source://cells-rails//lib/cell/rails.rb#68
  def cache_store; end

  # source://cells-rails//lib/cell/rails.rb#55
  def call(*_arg0); end

  # source://cells-rails//lib/cell/rails.rb#59
  def controller; end

  # source://cells-rails//lib/cell/rails.rb#82
  def form_authenticity_token(**options); end

  # source://cells-rails//lib/cell/rails.rb#59
  def parent_controller; end

  # @return [Boolean]
  #
  # source://cells-rails//lib/cell/rails.rb#64
  def perform_caching?; end

  # In Ruby 2.4.0+, Forwardable prints a warning when you delegate
  # to a private or protected method - so `delegates :protect_against_forgery?`
  # or `delegates :form_authenticity_token` will print warnings all
  # over the place
  #
  # This workaround prevents warnings being printed
  #
  # @return [Boolean]
  #
  # source://cells-rails//lib/cell/rails.rb#78
  def protect_against_forgery?; end
end

# source://cells-rails//lib/cell/rails.rb#86
module Cell::RailsExtensions::ViewModel::ClassMethods
  # source://cells-rails//lib/cell/rails.rb#87
  def expand_cache_key(key); end
end

# source://cells-rails//lib/cell/railtie.rb#5
class Cell::Railtie < ::Rails::Railtie; end

# source://cells-rails//lib/cell/railtie.rb#60
Cell::Railtie::IncludeTemplateModules = T.let(T.unsafe(nil), Proc)

# Test your cells.
#
# TODO: document me, Capybara, etc.
#
# source://cells-rails//lib/cell/test_case.rb#7
class Cell::TestCase < ::ActiveSupport::TestCase
  include ::Cell::Testing::ControllerFor
  include ::Cell::RailsExtensions::Testing
  include ::Cell::Testing
  extend ::Uber::InheritableAttr

  class << self
    # source://cells/4.1.8/lib/cell/testing.rb#68
    def controller(name); end

    # source://uber/0.1.0/lib/uber/inheritable_attr.rb#10
    def controller_class; end

    # source://uber/0.1.0/lib/uber/inheritable_attr.rb#6
    def controller_class=(v); end
  end
end

module Cell::Testing
  include ::Cell::RailsExtensions::Testing
end

# source://cells-rails//lib/cell/translation.rb#1
module Cell::Translation
  # source://cells-rails//lib/cell/translation.rb#7
  def initialize(*_arg0); end

  private

  # If you override this to change this path, please report it on the trailblazer/chat gitter channel,
  # so we can find out best practices.
  #
  # source://cells-rails//lib/cell/translation.rb#15
  def translation_path; end

  class << self
    # @private
    #
    # source://cells-rails//lib/cell/translation.rb#2
    def included(includer); end
  end
end

# source://cells-rails//lib/cells/rails/version.rb#1
module Cells; end

# source://cells-rails//lib/cells/rails/version.rb#2
module Cells::Rails; end

# source://cells-rails//lib/cells/rails/version.rb#3
Cells::Rails::VERSION = T.let(T.unsafe(nil), String)
